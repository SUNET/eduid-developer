eduid:
    webapp:
        common:
            # enable disable debug mode
            DEBUG: yes
            # the domain for the session cookie. If this is not set, the cookie will
            # be valid for all subdomains of SERVER_NAME.
            SESSION_COOKIE_DOMAIN: .eduid.docker
            SESSION_COOKIE_SECURE: no
            # The URL scheme that should be used for URL generation if no URL scheme is
            # available. This defaults to http
            PREFERRED_URL_SCHEME: http
            SERVER_NAME: dashboard.eduid.docker:8080
            # Redis config
            REDIS_HOST: redis.eduid_dev
            REDIS_PORT: 6379
            REDIS_DB: 0
            # SAML2 and SP config
            SAML2_LOGIN_REDIRECT_URL: /
            SAML2_SETTINGS_MODULE: /opt/eduid/etc/saml2_settings.py
            SAML2_LOGOUT_REDIRECT_URL: http://html.eduid.docker/
            SAML2_USER_MAIN_ATTRIBUTE: eduPersonPrincipalName
            SAML2_STRIP_SAML_USER_SUFFIX: "@local.eduid.se"
            TOKEN_SERVICE_URL: http://dashboard.eduid.docker:8080/services/authn
            CELERY_CONFIG:
                CELERY_RESULT_BACKEND: amqp
                CELERY_TASK_SERIALIZER: json
                # Avoid broken connections across firewall by disabling pool
                # http://docs.celeryproject.org/en/latest/configuration.html#broker-pool-limit
                BROKER_POOL_LIMIT: 0
            AVAILABLE_LANGUAGES:
                en: English
                sv: Svenska
            MAIL_DEFAULT_FROM: info@eduid.se

        authn:
            APPLICATION_ROOT: /services/authn
            SECRET_KEY: supersecretkey
            MONGO_URI: mongodb://eduid_authn:eduid_authn_pw@mongodb.eduid_dev
            LOGGER_NAME: authn
            LOG_FILE: /var/log/eduid/authn.log
            LOG_LEVEL: DEBUG
        letter_proofing:
            APPLICATION_ROOT: /services/letter-proofing
            SECRET_KEY: supersecretkey
            LOGGER_NAME: letter_proofing
            LOG_FILE: /var/log/eduid/letter_proofing.log
            LOG_LEVEL: DEBUG
            MONGO_URI: mongodb://eduid_idproofing_letter:eduid_idproofing_letter_pw@mongodb.eduid_dev
            MSG_BROKER_URL: amqp://eduid:eduid_pw@rabbitmq/msg
            AM_BROKER_URL: amqp://eduid:eduid_pw@rabbitmq/am
            # Setting EKOPOST_DEBUG_PDF to a path means that the other EKOPOST settings will be ignored
            # and that the pdf only will be written to to the supplied path, not sent to the letter service.
            EKOPOST_DEBUG_PDF: /opt/eduid/run/debug_letter.pdf
            EKOPOST_API_URI: https://api.ekopost.se
            EKOPOST_API_VERIFY_SSL: yes
            EKOPOST_API_USER: ekopost_user
            EKOPOST_API_PW: ekopost_pw
        oidc_proofing:
            APPLICATION_ROOT: /services/oidc-proofing
            SECRET_KEY: supersecretkey
            LOGGER_NAME: oidc_proofing
            LOG_FILE: /var/log/eduid/oidc_proofing.log
            LOG_LEVEL: DEBUG
            CLIENT_REGISTRATION_INFO:
                client_id: client1
                client_secret: abcdef
            PROVIDER_CONFIGURATION_INFO:
                issuer: http://turq:13085/op/
            MONGO_URI: mongodb://eduid_oidc_proofing:eduid_oidc_proofing_pw@mongodb.eduid_dev
            AM_BROKER_URL: amqp://eduid:eduid_pw@rabbitmq/am
        support:
            SERVER_NAME: support.eduid.docker:8080
            SECRET_KEY: supersecretkey
            LOGGER_NAME: support
            LOG_FILE: /var/log/eduid/support.log
            LOG_LEVEL: DEBUG
            MONGO_URI: mongodb://eduid_support:eduid_support_pw@mongodb.eduid_dev
            STATIC_URL: http://html.eduid.docker/static/
            SUPPORT_PERSONNEL:
              - tigaz-pojot
        personal-data:
            APPLICATION_ROOT: /services/personal-data
            SECRET_KEY: supersecretkey
            MONGO_URI: mongodb://eduid_dashboard:eduid_dashboard_pw@mongodb/eduid_dashboard
            LOG_FILE: /var/log/eduid/personal-data.log
            LOG_LEVEL: DEBUG
            AM_BROKER_URL: amqp://eduid:eduid_pw@rabbitmq/am
        emails:
            APPLICATION_ROOT: /services/emails
            SECRET_KEY: supersecretkey
            MONGO_URI: mongodb://eduid_emails:eduid_emails_pw@mongodb.eduid_dev
            LOG_FILE: /var/log/eduid/emails.log
            LOG_LEVEL: DEBUG
            AM_BROKER_URL: amqp://eduid:eduid_pw@rabbitmq/am
        phones:
            APPLICATION_ROOT: /services/phones
            SECRET_KEY: supersecretkey
            MONGO_URI: mongodb://eduid_phones:eduid_phones_pw@mongodb.eduid_dev
            LOG_FILE: /var/log/eduid/phones.log
            LOG_LEVEL: DEBUG
            AM_BROKER_URL: amqp://eduid:eduid_pw@rabbitmq/am
            MSG_BROKER_URL: amqp://eduid:eduid_pw@rabbitmq/msg
            PHONE_VERIFICATION_TIMEOUT: 24
        jsconfig:
            # this is configuration for the flask app serving the jsconfig microservice
            APPLICATION_ROOT: /services/jsconfig
            SECRET_KEY: supersecretkey
            LOG_FILE: /var/log/eduid/jsconfig.log
            LOG_LEVEL: DEBUG
        jsapps:
            # this is the configuration for the js apps, that is sent by the jsconfig
            # microservice to the js apps.
            # Take care not to put any sensitive data here.
            AVAILABLE_LANGUAGES:
                - [en, English]
                - [sv, Svenska]
            PERSONAL_DATA_URL: /services/personal-data/user
            EMAILS_URL: /services/emails/
            PHONES_URL: /services/phones/
            OIDC_PROOFING_URL: /services/oidc-proofing/proofing
